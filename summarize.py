import os

summaryPrePart = """---
sidebar_position: 1
id: practise-coding-record
title: Docs Summary
tags: [intro]
---

> 本文主要总结本人所输出的技术文章。

## 作品集 Portfolio

- 我用一周时间开发了一个 🇸🇬 新加坡 pr 申请查询的应用 https://sgpass.info/
  - 小红书宣传帖子： [link](http://xhslink.com/0p7H7Q)
  - 自己一个人 solo 的项目
    1. 基于 Nextjs 搭建前后端
    2. 集成 Clerk 的用户鉴权
    3. 使用 Supabase 的 Postgres 数据库，目前还是免费版本
    4. 部署在 Vercel 上，自带简易的服务监控，开了会员 30 美刀一个月
    5. 在 Domaincheap 买域名，3美刀一年
    6. 使用 Chatgpt API 分析 500 条记录，6美刀
  - 持续更新中

"""

afterPart = """
> Auto generated by summarize.py
> 排版参考 [为什么这么设计系列文章](https://draveness.me/whys-the-design/)
"""

additions = """
- 063 [【Slide】我在组内做了一次技术分享：分布式系统，I did a Distributed Systems Sharing in our Team](https://docs.google.com/presentation/d/1WhaGyZQZUH905QXI5QKHfKzojU1wFxcuWiNiF2pq994)
- 062 [我在 NUS 的分布式系统课结课满分，I got 100 in NUS CS5223](https://doc.fenglyulin.com/docs/distributed-systems/milestone)
- 061 [【视频】43秒带你速通分布式系统概念 [Video] A quick tour of Distributed System](https://doc.fenglyulin.com/docs/distributed-systems/overview) 
- 060 [训练机器学习模型预测赢家，在 Kaggle 准确度最高 Game Winner Prediction, best 76.9% w EDA&Finetune](https://www.kaggle.com/code/kirklin/game-winner-prediction-best-76-9-w-eda-finetune)
"""

class SFile:
    def __init__(self, path, filename, ctime, is_additional_file=False):
        self.path = path
        self.filename = filename
        self.ctime = ctime
        self.is_additional_file = is_additional_file
    
def gather_markdown_files(folder_path):
    idx = 0
    for root, dirs, files in os.walk(folder_path):
        print("idx:", idx)
        print("Root:", root)
        for dir in dirs:
            print("Directory:", dir)
        for file in files:
            print("File:", file)
        break
    return None


def getDirs2(folder_path):
    dirs = []
    for root, dirs, files in os.walk(folder_path):
        dirs.append(dirs)
        for dir in dirs:
            full_path = os.path.join(root, dir)
            print("full_path:", full_path)
            print("ctime", os.path.getctime(full_path))
            print("ctime_int", int(os.path.getctime(full_path)))
            print("size", os.path.getsize(full_path))
            print("isfile", os.path.isfile(full_path))
            print("isdir", os.path.isdir(full_path))
            print("stat", os.stat(full_path))
            stat = os.stat(full_path)
            print("stat.st_ctime", stat.st_ctime)
        break
    return dirs


# ['artificial-intelligence', 'data-science'...
def getDirs(folder_path):
    for root, dirs, files in os.walk(folder_path):
        return sorted(dirs)


def getFiles(folder_path):
    for root, dirs, files in os.walk(folder_path):
        return sorted(files)

folder_path = "docs"
files = getFiles(folder_path)

domains = getDirs(folder_path)

domainToMarkdownFiles = {}
domainToSFiles = {} # SFile object
for domain in domains:
    if domain.endswith(".assets") or domain == "misc":
        continue

    domainPath = os.path.join(folder_path, domain)
    sFileList = []
    
    cFiles = getFiles(domainPath)
    for file in cFiles:
        if file.endswith(".md"):
            sFileList.append(SFile(os.path.join(domainPath, file), file, int(os.path.getctime(os.path.join(domainPath, file)))))
    
    subdomains = getDirs(domainPath)
    for subdomain in subdomains:
        subdomainPath = os.path.join(domainPath, subdomain)
        subdomainFiles = getFiles(subdomainPath)
        for subdomainFileName in subdomainFiles:
            if subdomainFileName.endswith(".md"):
                sFileList.append(SFile(os.path.join(subdomainPath, subdomainFileName), subdomainFileName, int(os.path.getctime(os.path.join(subdomainPath, subdomainFileName)))))
    
    domainToSFiles[domain] = sorted(sFileList, key=lambda x: x.filename)
    
# add additional files


domainToc = ""
summary = []
noHeadingOneFiles = []
for domain in domainToSFiles:
    # domain = "artificial-intelligence" -> domaincapitalize = "Artificial Intelligence"
    domaincapitalize = " ".join([word.capitalize() for word in domain.split("-")])
    domainToc += f"## {domaincapitalize}\n"

    idxOfDomain = 1
    for sfile in domainToSFiles[domain]:
        fileName = sfile.filename
        filePath = sfile.path
        
        if sfile.is_additional_file:
            # TODO: add additional files
            continue
        
        if "daily-challenge" in sfile.path:
            continue

        # get the level 1 heading of the markdown file
        header = ""
        with open(sfile.path, "r") as f:
            for line in f:
                if line.startswith("# "):
                    header = line[2:].removesuffix("\n")
                    break
        if header != "":
            # Header: Nextjs Project Dashboard 02 File: frontend/240623-04-nextjs-project-dashboard-02.md
            # print("Header:", header, "File:", file) 

            fileName = fileName.removesuffix(".md")
            cfile = f"[{header}](https://doc.fenglyulin.com/docs/{domain}/{fileName})\n"
            summary.append(cfile)
            domainToc += f"{idxOfDomain}. " + cfile
            # header = file.split("/")[-1]
            idxOfDomain += 1
        else:
            noHeadingOneFiles.append(fileName)
    domainToc += "\n"

# print(domainToc)

allToc = "# 全部文章 All Articles\n\n"
# summary = sorted(summary)
for i in range(len(summary)):
    allToc += f"{i+1}. {summary[i]}"
    
# print(allToc)
final = summaryPrePart + allToc + domainToc

with open(os.path.join(folder_path, "practise-coding-record.md"), "w") as f:
    f.write(final)

print("Num of headinding Files", len(noHeadingOneFiles), "\nNo Heading One Files:", noHeadingOneFiles)